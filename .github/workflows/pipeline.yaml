name: Hourly Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - new-pipeline
  # schedule:
  # - cron: "0 * * * *"


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Build docker image
          run: docker build -t gradient-pipeline ./pipeline

        - name: set date
          id: set_date
          run: |
            current_date=$(date +%Y-%m-%d)
            echo "CURRENT_DATE=$current_date" >> $GITHUB_OUTPUT
        
        - name: set hour minus two
          id: set_hour
          run: |
            current_hour=$(date +%H)
            hour_minus_two=$((current_hour - 2))
            echo "CURRENT_HOUR=$current_hour" >> $GITHUB_OUTPUT
            echo "HOUR_MINUS_TWO=$hour_minus_two" >> $GITHUB_OUTPUT
        
        - name: process changesets
          run: |
            docker run -v ./data:/tmp gradient-pipeline sh -c "node cli.js process-hour $CURRENT_DATE $HOUR_MINUS_TWO"
          env:
            CURRENT_DATE: ${{ steps.set_date.outputs.CURRENT_DATE }}
            HOUR_MINUS_TWO: ${{ steps.set_hour.outputs.HOUR_MINUS_TWO }}
        
        - name: padded hour
          id: padded_hour
          run: |
            if [[ $HOUR_MINUS_TWO -lt 10 && $HOUR_MINUS_TWO -gt 0 ]]; then
              HOUR_MINUS_TWO="0$HOUR_MINUS_TWO"
            fi
            echo "PADDED_HOUR=$HOUR_MINUS_TWO" >> $GITHUB_OUTPUT
          env:
            HOUR_MINUS_TWO: ${{ steps.set_hour.outputs.HOUR_MINUS_TWO }}
        
        - name: convert to fgb
          run: |
            docker run -v ./data:/tmp gradient-pipeline sh -c "ogr2ogr -f FlatGeobuf /tmp/${CURRENT_DATE}T${PADDED_HOUR}.fgb /tmp/${CURRENT_DATE}T${PADDED_HOUR}.geojson -skipfailures"
          env:
            CURRENT_DATE: ${{ steps.set_date.outputs.CURRENT_DATE }}
            PADDED_HOUR: ${{ steps.padded_hour.outputs.PADDED_HOUR }}
        
        - name: Check if the pipeline ran successfully
          run: ls -lh ./data

        # - name: Upload the FGB to Cloud Storage


            
